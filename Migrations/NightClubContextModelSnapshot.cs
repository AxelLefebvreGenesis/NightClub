// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NightClubTestCase.DBContext;

#nullable disable

namespace NightClubTestCase.Migrations
{
    [DbContext(typeof(NightClubContext))]
    partial class NightClubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NightClubTestCase.Models.IdentityCard", b =>
                {
                    b.Property<int>("IdentityCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("identityCardId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentityCardId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birthDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expirationDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("firstName");

                    b.Property<bool>("HasExpired")
                        .HasColumnType("bit")
                        .HasColumnName("hasExpired");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("NationalRegisterNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("nationalRegisterNumber");

                    b.Property<DateTime>("ValidityDate")
                        .HasColumnType("datetime")
                        .HasColumnName("validityDate");

                    b.HasKey("IdentityCardId");

                    b.ToTable("IdentityCard", (string)null);
                });

            modelBuilder.Entity("NightClubTestCase.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"), 1L, 1);

                    b.Property<DateTime?>("BlacklistEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("blacklistEndDate");

                    b.Property<int>("IdentityCardId")
                        .HasColumnType("int")
                        .HasColumnName("identityCardId");

                    b.Property<string>("MailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("mailAddress");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("MemberId");

                    b.HasIndex("IdentityCardId")
                        .IsUnique();

                    b.HasIndex(new[] { "IdentityCardId" }, "IX_Member_identityCardId")
                        .HasDatabaseName("IX_Member_identityCardId1");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("NightClubTestCase.Models.MemberCard", b =>
                {
                    b.Property<int>("MemberCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memberCardId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberCardId"), 1L, 1);

                    b.Property<bool>("IsLost")
                        .HasColumnType("bit")
                        .HasColumnName("isLost");

                    b.HasKey("MemberCardId");

                    b.ToTable("MemberCard", (string)null);
                });

            modelBuilder.Entity("NightClubTestCase.Models.Record", b =>
                {
                    b.Property<int>("MemberCardId")
                        .HasColumnType("int")
                        .HasColumnName("memberCardId");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.HasIndex(new[] { "MemberCardId" }, "IX_Record_memberCardId");

                    b.HasIndex(new[] { "MemberId" }, "IX_Record_memberId");

                    b.ToTable("Record", (string)null);
                });

            modelBuilder.Entity("NightClubTestCase.Models.Member", b =>
                {
                    b.HasOne("NightClubTestCase.Models.IdentityCard", "IdentityCardNavigation")
                        .WithOne("Member")
                        .HasForeignKey("NightClubTestCase.Models.Member", "IdentityCardId")
                        .IsRequired()
                        .HasConstraintName("FK_Member_IdentityCardId");

                    b.Navigation("IdentityCardNavigation");
                });

            modelBuilder.Entity("NightClubTestCase.Models.Record", b =>
                {
                    b.HasOne("NightClubTestCase.Models.MemberCard", "MemberCardNavigation")
                        .WithMany()
                        .HasForeignKey("MemberCardId")
                        .IsRequired()
                        .HasConstraintName("FK_Record_MemberCardId");

                    b.HasOne("NightClubTestCase.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Record_Member");

                    b.Navigation("Member");

                    b.Navigation("MemberCardNavigation");
                });

            modelBuilder.Entity("NightClubTestCase.Models.IdentityCard", b =>
                {
                    b.Navigation("Member");
                });
#pragma warning restore 612, 618
        }
    }
}
